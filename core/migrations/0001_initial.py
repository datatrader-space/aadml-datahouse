# Generated by Django 3.2 on 2025-01-16 13:35

from django.db import migrations, models
import django.db.models.deletion
import django.utils.crypto


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Bot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=500, unique=True)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('attendance', 'attendance'), ('twitter', 'twitter'), ('tiktok', 'tiktok'), ('cleaner', 'cleaner'), ('data_enricher', 'Data Enricher'), ('openai', 'OpenAI'), ('audience', 'Audience')], max_length=50)),
                ('info', models.JSONField(default={})),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('info', models.JSONField(default={})),
                ('profile_picture', models.CharField(blank=True, max_length=100, null=True)),
                ('service', models.CharField(choices=[('instagram', 'Instagram'), ('attendance', 'attendance'), ('twitter', 'twitter'), ('tiktok', 'tiktok'), ('cleaner', 'cleaner'), ('data_enricher', 'Data Enricher'), ('openai', 'OpenAI'), ('audience', 'Audience')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProfileText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default=django.utils.crypto.get_random_string, editable=False, max_length=36, unique=True)),
                ('content', models.TextField()),
                ('Profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_text', to='core.profile')),
                ('tasks', models.ManyToManyField(to='core.Task')),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='tasks',
            field=models.ManyToManyField(to='core.Task'),
        ),
        migrations.CreateModel(
            name='PostText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default=django.utils.crypto.get_random_string, editable=False, max_length=36, unique=True)),
                ('content', models.TextField()),
                ('post', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='text', to='core.post')),
                ('tasks', models.ManyToManyField(to='core.Task')),
            ],
        ),
        migrations.CreateModel(
            name='PostMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video')], default='image', max_length=50)),
                ('file_path', models.CharField(max_length=255)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medias', to='core.post')),
                ('tasks', models.ManyToManyField(to='core.Task')),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='core.profile'),
        ),
        migrations.AddField(
            model_name='post',
            name='tasks',
            field=models.ManyToManyField(to='core.Task'),
        ),
        migrations.CreateModel(
            name='LeadAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('locked_at', models.DateTimeField(blank=True, null=True)),
                ('last_interaction_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed')], default='pending', max_length=50)),
                ('Profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.profile')),
                ('bot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.bot')),
            ],
        ),
        migrations.CreateModel(
            name='CommentText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default=django.utils.crypto.get_random_string, editable=False, max_length=36, unique=True)),
                ('content', models.TextField()),
                ('comment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='text', to='core.comment')),
                ('tasks', models.ManyToManyField(to='core.Task')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='Profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.profile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.post'),
        ),
        migrations.AddField(
            model_name='comment',
            name='tasks',
            field=models.ManyToManyField(to='core.Task'),
        ),
        migrations.AddField(
            model_name='bot',
            name='campaign',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.campaign'),
        ),
        migrations.CreateModel(
            name='Audience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(unique=True)),
                ('Profiles', models.ManyToManyField(related_name='audiences', to='core.Profile')),
                ('campaigns', models.ManyToManyField(related_name='audiences', to='core.Campaign')),
                ('tasks', models.ManyToManyField(to='core.Task')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='profile',
            unique_together={('username', 'service')},
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='core.profile')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='core.profile')),
                ('tasks', models.ManyToManyField(to='core.Task')),
            ],
            options={
                'unique_together': {('profile', 'following')},
            },
        ),
    ]
